/*
 * Generated by erpcgen 1.9.1 on Tue Oct 25 18:18:47 2022.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#if !defined(_qspi_rad_test_server_h_)
#define _qspi_rad_test_server_h_

#ifdef __cplusplus
#include "erpc_server.hpp"
#include "erpc_codec.hpp"
extern "C"
{
#include "qspi_rad_test.h"
#include <stdint.h>
#include <stdbool.h>
}

#if 10901 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif


/*!
 * @brief Service subclass for QSPIService.
 */
class QSPIService_service : public erpc::Service
{
public:
    QSPIService_service() : Service(kQSPIService_service_id) {}

    /*! @brief Call the correct server shim based on method unique ID. */
    virtual erpc_status_t handleInvocation(uint32_t methodId, uint32_t sequence, erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory);

private:
    /*! @brief Server shim for sectorErase of QSPIService interface. */
    erpc_status_t sectorErase_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for pageRead of QSPIService interface. */
    erpc_status_t pageRead_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for pageWrite of QSPIService interface. */
    erpc_status_t pageWrite_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for chipSelect of QSPIService interface. */
    erpc_status_t chipSelect_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for chipInitial of QSPIService interface. */
    erpc_status_t chipInitial_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for readCurrent of QSPIService interface. */
    erpc_status_t readCurrent_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for changeFrequency of QSPIService interface. */
    erpc_status_t changeFrequency_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
};

extern "C" {
#else
#include "qspi_rad_test.h"
#endif // __cplusplus

typedef void * erpc_service_t;

erpc_service_t create_QSPIService_service(void);

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
void destroy_QSPIService_service(erpc_service_t service);
#elif ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_STATIC
void destroy_QSPIService_service(void);
#else
#warning "Unknown eRPC allocation policy!"
#endif

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // _qspi_rad_test_server_h_
